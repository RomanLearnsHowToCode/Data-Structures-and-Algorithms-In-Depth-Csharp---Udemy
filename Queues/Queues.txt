// What is queue data structure?
Queue is a collection of objects
FIFO (First In First Out)
Imagine pipe or queue of cars at drive through
queue have front and end, inserted at end, removed from front
(enqueue - insert) (dequeue - remove)

- applications of queues
used in prinets
access to memory of shared resources
web servers responding to requests
computer applications
some of computer algorithms

- queues abstract data type (ADT)

enqueue(object) - insert element
dequeue() - remove & return element
first() - returns first element
len() - returns number of elements
isEmpty() - whether queue is empty or not

// Queues using arrays

enqueue method - first we will check if the queue is full, if it is full we cannot insert and need to return, 
if it is not full, then we can add the elements

dequeue method won't take any parameters, first we need to check if the queue is empty, if it is empty, then we need to return, we cannot perform any action


// Queues using Linked List
queues using linked list can have insert and remove operations.
insert at front or read, and remove at the front of rear, it is better to use the insert and remove at front of the queue because of time complexity of O(1)


// What are Double Ended Queues
double ended queues are also collection of objects
supports insertion and deletion at both the front nad rear end of the queue

pipe has got two ends open, front and rear, DEQueue structure (Double Ended) we can insert and remove from the front and reader

waiting list in the restaurant
- will enter restaurant
- will see that there is no free space
- person at the end of the end could leave the queue

DeQue Abstract Data Type support following methods

addFirst(object) - instert element at the front
addLast(object) - inster element at the rear
removeFirst() - remove element from the front and return element
removeLast() - remove element from the read and return element

first() - return element which is at front of the DEQue
last() - return element which is at the end of the DEQue
len() - return the number of elements
isEmpty() - whether the DEque is empty or not

to store the elements we can use arrays and linked list, and the ADT could be applied


