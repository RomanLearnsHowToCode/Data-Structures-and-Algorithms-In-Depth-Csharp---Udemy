// Count Sort - how does it work
count array - size greatest + 1 so if the largest element is 9, then the size would be 10, because each element will be counted, it means that if we 
will have 2x 9kg barels, then we will have at index 10 2x entry (2x9kg barels)

6 barels - need to arrange them according to their weight - 3 5 8 9 6 2
each index of count array would be initialised with value 0

    1 1   1 1   1 1
0 1 2 3 4 5 6 7 8 9

when we have duplicates, the index would be incremented as an example, imagine that we have got additional 3 and 5 kg barels

    1 2   2 1   1 1
0 1 2 3 4 5 6 7 8 9

so this is the count, now we need to sort the array;

count array: 0 0 0 0 0 0 0 0 0 0

barels array: 2 3 3 5 5 6 8 9

// Count Sort - Algorithm and Analysis

algorithm countsort(A,n) 

A = 3 5 8 9 6 2 3 5 5, we need to find largest element

maxsize = max(A) - 9
carray = [] maxsize +1 

- need to traverse to the end of array
for i = 0, i < n, i++ {
carray[A[i]] = carray[A[i]] + 1; 
}

i,j = 0 - i is the index of carray, j is index of array A

time complexity - O(n+m) - linear O(n) 
space complexity - O(m)

// https://code-maze.com/counting-sort-in-c/ - write the Counting Sort in C#!

// Radix Sort - How does it works

can sort from least significant digit or from the most significiant digit
digits can be only between 0 - 9 
when all digits are considered, then they will be all sorted
barrels in kg: 63, 250, 835, 947, 651 ,28

the least significant digits means for 63 = 3, 250 = 0, 835 = 5, 947 = 7, 651 = 1, 28 = 8

seqentual order - 0 = 250, 651 = 1, 63 = 3, 835 = 5, 947 = 7, 28 = 8
second digit is selected 

250 = 5, 651 = 5, 63 = 6, 835 = 3, 947 = 4, 28 = 2

sort 28 835 947 250 & 651 - second round done (second radix)
250 will be removed, 651 kept, buckets cleared

third digit

0 = 28 & 63, 835 = 8, 947 = 9,250 = 2, 651 = 6

arrange

28 63 250 651 835 947 

no more digits to be considered, barels are sorted according to their weight
easiest case to sort 

// Radix Sort - Algorithm and Analysis

function radixsort(A,n) 
A = 63 250 835 947 651 28

find largest element in the array - maxElement = maximum element using max function
digits = fidingdigits(maxElemenet) - 947

Radix sort is using bins based on radix 
We need 10 bins (array size 9)  0 1 2 3 4 5 6 7 8 9 

// finding remainder of the number
for i=0; i < digits; i++{
    for j = 0; j < n; j++{
        e = (A[j] / pow(10,i)) % 10
        bins[e].append(A[j]);
    }
    // clearing the buckets
    k = 0
    for(x = 0; x < 10; x++){
        A[k] = bins[x].remnove()
        k = k + 1
    }
}

// Bucket Sort - How does it works

- uses an array of buckets to perform sorting
- insert elements in the buckets according to index computer
- sort non-empty bucket using insertion sort
- traverse buckets in sequence and store elements back into array

// Bucket Sort - Algorithm and Analysis

bucketsort(a,n) - collection of the elements and lenght of array

A = [34, 54, 92, 86, 64, 28]

max = maximum(A) - find the maximum element in the array

buckets = [] - initially the buckets are empty

// O(n)
for (i = 0; i < n; i++)
{
// j representes the index of bucket
j = n * A[i] / (max + 1)
    buckets[j] = A[i]
}

O(n^2)
// sorting buckets
for(i=0; i < 10; i++){
    insertionSort(buckets[i])
}

k = 0; 


for (i = 0; i < 10; i++) {
A[k] = bucket[i].remove()
k = k+1;
}

// Summary of Complexities - Index Based Sorting Algorithms

                        Best Case       Average Case        Worst Case      Space   Stable?
Count Sort              O(n)            O(n)                O(n)            O(n)       YES
Bucket / Bin sort       O(n)            O(n^2)              O(n^2)          O(n)       YES
Radix Sort              O(n)            O(n)                O(n)            O(n)       YES

