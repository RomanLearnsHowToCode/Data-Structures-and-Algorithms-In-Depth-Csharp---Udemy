// GRAPHS - introduction

- graphs represents relationship between objects
- collection of objects along with pairwise connection between objects

road network -> cities are objects -> pair wise relationship between objects are represented by roads 

- objects are vertecies, objects are edges 

airports are objects -> fly parths are vertices 

- graph is a collection of object called as Vertices and together with relationship between them called as EDGES

Graph (G) = {V,E}

- each edge in the graph joins two vertices
- Vertices (V) = {A,B,C,D}
- Edges (E) = {A -> B, A -> D, B -> C, B -> D, C -> D}

Directed Edge - An Edge (u,v) is directed if pair (u,v) is ordered, with U preceding V, Edge is oriented or Direction
Undirected Ege - An Ege (u,v) is undirected if pair (u,v) is not ordered, Edge has no orientation
Weighted Edge - Cost or weight is assigned to each edge (u,v)
Weighted Undirected Edge - without direction, but weighted
Weighted Directed Edge - with direction and weights

End Vertices - Two vertices joined by an edge - origin -> destination
Adjacent Vertices - Two vertices are adjacent if there is an edge between them
Incident Edge - if vertex is one of the end points

Outgoing Edge - origin is the vertex
Incoming Edge - destination is the vertex

Self loop - if both the end points are the same
Parallel Edges - edge from u to v (u,v) as well as an edge from v to u (v,u)

// Degree of a Vertex

- degree of vertex -> dev(v) - number of edges
- in degree and out degree

so in plain english, if multiple paths are pointing at a edge, then that is the degree of the vertex
IN degree says how many paths are pointing toward that edge, and out degree says how many paths are pointing outward the edge

// PATH and CYCLE

GRAPH - A B C D edges

- path - sequence of edges starting at one vertex and edning at another vertex
- there can be several paths in graph

weighted undirected graph


weighted directed graph
- paths in weighted directed graph have direction

cycling through the graph 
- Starting at position A going though all the edges A -> B -> C -> D -> A, but can be also A -> B -> D -> A

Directed acyclic graph 
-> whern there are no cycles in a directed graph

// Subgraphs and Connected components

- subgraph is a graph whose vercies and edges are subsets of vercies and edges of another graph

imagine two graphs, if two graphs contain same edges, then we say that these are subsets

- connected components - connected subgraphs are known as connected components

- articulation point - verte whose removal results in connected components
- strongly connected graph - all the vertices are reachable from any vertex

// GRAPHS - ADT

- a graph is a collection of vertices and edges

- create(n) - creates graph with n vertices and no edges
- insert_edge(u, v, w = 1) - creates edge from u to v, storing weight w (by default 1)
- remove_edge(u,v) - deletes edge from u to v
- exist_edge(u, v) - returns true if edge exists between u and v, else false
- vertex_count() - returns number of vertices in the graph
- edge_count() - returns number of edges in the graph
- vertices() - returns all the vertices of the graph
- edges() - returns all the edges of the graph
- degree(u) - returns the degree of the vertex u
- indegree(u) - returns the indegree of the vertex u
- outdegree(u) - returns the outdegree of the vertex u

// GRAPHS - REPRESENTATION

- A graph can be represented using different data structures

- Edge List: Maintains list of all edges
- Adjacency List: For each Vertex, separate list of edges is maintaned
- Adjacency Matrix: Maintains a matrix of vertices, where each cell stores the refernce to the edge.

// EDGE LIST REPRESENTATION

- Edge list - maintains list of all edges
Vertex - stored in list and Edges are stored in list as well, linked list or doubly linked list

we can store references from edges to vertexes

Graphs - Edge List Performance

Vertices: N; Edges: M;

Operation:				Time Complexity
insert_edge(u,v, w=1)   O(1)
remove_edge(u,v)		O(1)
exist_edge(u,v)			O(m)
vertex_count()			O(1)
edge_count()			O(1)
vertices()				O(n)
edges()					O(m)
degree()				O(m)

Space complexity: O(n+m)

// Adjacency List Representation 

Adjacency List: for each vertex, separate list of edges is maintanted - more efficient, all edges can be easily accessed, is array of list

Vetices
Each list contain 

Edges and vertices are stored in list / array

The Adjacency list also depends on directed or undirected graphs


// Graphs - Adjacency Matrix Representation

- Adjacency Matrix: maintains a matrix of vertices, where each cell stores the reference to the edge

rows and colums 

Adjacency Matrix Time and Space complexity

Operation:				Time Complexity
insert_edge(u,v, w=1)   O(1)
remove_edge(u,v)		O(1)
exist_edge(u,v)			O(1)
vertex_count()			O(1)
edge_count()			O(1)
vertices()				O(n)
edges()					O(m)
degree(u)				O(n)

the biggest advantage of this method is that the data can be accessed very easily

space complexity: O(n x n) = O(n2) - worse than the other representations