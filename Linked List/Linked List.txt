// What os Linked List?

Arrays:
- arrays are of fixed size - immutable
- once array is declared size cannot be changed
- arrays stores data sequentially in the memory
- data in array must be of same type

Linked List:
- Linked list is a collection of elements, where each element is represented as a node
- Node contain DATA and LINK, link contain a reference where the point 
- When the node is last item in the collection, the link will be null
- How we will access the collection of elements? This is done by link, which stores the memory addres of the nodes
- Linked list is not continuous data structure as arrays are. Arrays have elements side by side

- We are using the Linked lists for following reasons:

Problems with Arrays
- Arrays are of fixed size
- Arrays stores data sequentially in the memory
- we don't know how many elements we need to store


// Creating a Node of Linked List

Linked List:
- Add or delete any amount of elements in the data structure
- Efficient utilisation of memory
- NODE is a location in memory, they are not sequential
- Linked List contain head and tail, the head is of fixed position, otherwise we would lose the reference of the linked list beginning

// Playing with the links of Linked List



// How to create a linked list?
addlast - is used to create a node at last position, initially the list will be empty, so after we will create the first node, we will need to check if the
list is empty. If the list is empty, then head = newest, if the condition is false, then we will asign tail = newest, and we will increase the size of the linked list
size = size +1; if there is only one node in the linked list, then the head and tail would point to the first node.

// Displaying or Traversing Linked List
starting at head and using the .next reference we are traversing though the list, until we will reach the tail of the list
tail of the linked list contain a null as next reference.


// Insert Element at Beginning of List

- we need to check if the list is empty, if the list is empty, then we need to select this node as head of the list
head = newest
head will be pointing at this node

- we need to assign tail of the linked list
tail = newest
tail will point at the first node as well

if the list is not empty, 

 newest.next = head
 head = newest 

 addFirst will add the node at the beginning of the linked list and would assign the head to it, and increase the size of the linked list

 // insert anywhere

 - we need to insert the node at any position / given position, we will need to traverse the linked list, 
 we will create the node again, so it will be reference of newest.

 the node will have reference to head stored as variable p
 we will have variable i as the integer of how many positions the node traversed


 // Delete Element at Beginning of Linked list
 Linked list contain collection of elements represented by nodes
 - to remove the first node of the list we need to check if the list is empty
 - if the list is empty, then we will print that the list is empty and we will return

 - if the list is not empty, then we will retrieve the element we are deleting, 
 e = head.element
 head = head.next - second node, so it will assign the head to the following node
size = size - 1; - since we have reduced the list size by one
if the list has got only one element, then after the deleting of the element, list will be empty, the head and tail should be null
head should be assigned to null, and tail should be assigned to null, we will need to explicitliy assign the tail to null.

in certain programming languages such as C or C++ we will need to explicitly free the memory.

 // Delete Element at End of Linked list
 // Delete Element anywhere in between Linked list


 // Searching Element in Linked list
 searching for the key in linked list, we will create two variables, index and p, in if statement we will compare the p.element with the key,
 if they equal, we found the element, and we would return the index

 if not, when we will traverse through the list, and assign the p. to next node and increase the index

 O(n) - worst case scenario
