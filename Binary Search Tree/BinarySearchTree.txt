// What are Binary Search Trees
Binary search tree is a binary tree where all the elements in the subtree on the left side are smaller than the root, and on the right side are greater than the root
We don't need to bother about the leaf nodes, as they don't have children

- every node has a key
- keys in left sub-tree of node are smaller than the key in the node
- keys in right sub-tree of node are larger than the key in the node
- left and right subtrees are also binary search trees

properties of binary search trees
- binary search trees will not have duplicate elements or nodes
- inorder traversal will have list of elements in sorted order

representation of binary search trees - not efficient due to the memory utilisation
- can be represented via arrays or linked lists (links rather than lists)

// Binary search trees - searching (concept)
How to perfrom search operation
left subtree smaller than node
right subtree greater than the node

for insertion or deletion we first need to search, then we can delete or insert
- search from root
if the root element is the one we are searching for, we would return 

if the element is smaller than the node, then we need to search in left subtree, if greather than the node, then we need to search in right side

in worst case the search algorithm will be O(n) where the n is height of tree
we can use iterative or recursive functions 

// Binary search trees - iterative search function

function search(key) 
troot = root - reference of root

while (troot) then - move the reference till the leaf node
we will check if the key equals the element in node - if key == troot.element then return True
else if the key < troot.element then
troot = troot.left 
else if key > troot.element then
troot = troot.right
return false if we didn't find element

we need to do comparisons on each level of tree, in worse case scenario we need to perform search at each degree (level) - O(n)

// Binary search trees - recursive search function
function rsearch(troot, key) 
recursive - so we will checki if the function is aiming for root,

if troot then
if key == troot.element then
return true

else if key < troot.element then
return rsearch (troot.left, key)

else if key > troot.element then
return rsearch (troot.right, key)

else 
return false

O(n)

// Binary search trees - insertion (concept)
we cannot insert the node anywhere, we need to insert in the same manner as the searching

if we want to insert a element, we need to first find the node, where the element should be insert
the insertion would start at root


// Binary search trees - iterative insert function
will create function in which we will be creating temporary varibable
we will point to root node, and then perform iterative search
until we will find the right spot, where the node should be inserted, there we will create new node

// Binary search trees - recursive insert function
function rinsert (troot,e) 
if troot then
if e < troot.element then
troot.left = rinsert (troot.left,e)

else if e > troot.element then
troot.right = rinsert (troot.right, e)

else 
n = Node(e)
troot = n

return troot

function would first search where to insert the node, then it would insert it in way, that it would create a node

// Traversing Binary Search Tree

in order traversal
pre order traversal
post order traversal
level order traversal

In Order Traversal
visit the left subree first, then the root, then right subtree

left subtree from left child to root of the subtree and then right node of the subtree
then visit the root
and then the right subtree in same manner as left subtree


Pre Order Traversal
visit root, then left subtree, then left node of the subtree, then right node of the subtree
then visit right root of subtree, then left child, and right child

Post Order Traversal
left child of the left subtree, then the right node of the left subtree, then the root of the left subtree
then
left child of the right subtree, then the right node of the right subtree, then the root node of the right subtree
and then the root

Level Order Traversal
Root, left subtree node, right subtree node
then left child of the left subtree node, right child of the left subtree node, left node of the right subtree, right child of the right subtree

// Function for preorder traversal


// Function for Postorder Traversal


// Function for level order traversal 


// Binary search tree - deletion


// Binary search tree - deletion case node with one subtree

// Binary search tree - deletion case-node with both subtrees

// Count number of nodes in binary tree

// Find height of binary tree

// Performance and Problem of Binary Search Trees