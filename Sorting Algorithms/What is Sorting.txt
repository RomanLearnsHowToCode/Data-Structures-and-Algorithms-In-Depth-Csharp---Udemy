Sorting is one of the most important computing problems

Sorting:

- comparison sorting
selection sort
insertion sort
bubble sort
merge sort
quick sort
shell sort
heap sort

- index based 
count sort
bucked sort
radix sort

- stable and unstable sorting (dealing with duplicates)

if there is a duplicate in the array or collection of elements, then in the stable sorting, the element is preserved
ex;

3 5 8 9 5 2 

will be 
2 3 5 5 8 9 (the element of index 1 (5) will be first, and then element of index 4 (also 5) will move to index 3)

unstable would shift them over, 2 3 5 5 but they will move

in some cases the stable is prefered, and in some the unstable sorting is prefered

// Selection sort - the easiest

- select a minimum element from the collection
- place the selected element in a appropriate place

6 barels, sort them by their weight - 3 5 8 9 6 2 


// Insertion sort

- select one element at a time from the left of the collection
- insert the element at proper position
- After insertion every element to its left will be sorted

6 barels - 3 5 8 9 6 2

1) will take 3 kg barel - this barel is already sorted
2) remaining are 3 8 9 6 2
3) 3 kg is smaller than 5 kg, so insert it
4) 8 kg will be compared with 5 kg barel, and it is smaller, so it will insert it, and the 8 kg is sorted
5) 9 kg barel will be compared with 8 kg barel, and it is smaller, so it will insert it, and it is sorted
6) 6 kg will be compared with the 9 kg barel, so it will swap each barel from the left side of the 6 kg barel
7) 6 kg barel is swapped with 9 kg barel, then 6 kg is compared to 8 kg barel
8) 6 kg barel is smaller than the 8kg barel, so it will swap again, and the 8 kg barel will move
9) 6 kg barel is compared to 5 kg barel, 5 kg barel is smaller than 6 kg so the 6 kg barel is sorted
10) 2 kg barel will be compared to 9 kg barel, it is smaller, so it will have compare each element on the left
11) 2 kg barel will swap with the 9 kg barel, then compare with the 8 kg barel, it is smaller so it will again swap the barels
12) 2 kg barel is compared with 5 kg barel, it is smaller so it will swap again
13) 2 kg barel will be compared with 3 kg barel, it is smaller again, so it will swap
14) nothing is on the left side of the 2kg barel, so it is sorted, the insertion sort is done, all array is sorted

// Bubble sort - worst case O(n2) - best case O(n)
- stable sorting algorithm
- compare the consecutive elements
- if left element is greater than the right element, swap them
- continue till the end of the collections and Perform several passes to sort the elements

imagine 6 barels - 3, 5, 8, 9, 6, 2 kgs, and they need to be sorted according to their weight

1) compare 3 kg with 5kg
2) compare 5 kg with 8kg barel
3) compare 8 kg with 9 kg barel 
4) compare 9 kg with 6 kg - 6 is smaller so they will swap
5) compare 9 kg with 2 kg - 2 kg is smaller - so they will swap
6) reached the end of array - 9 kg is already sorted

second round would start again
1) 3 kg with 5 kg 
2) 5 kg with 8 kg
3) 8 kg with 6 kg, it will swap
4) 8 kg with 2 kg, it will swap again, 8 is sorted

1) 3kg with 5 kg
2) 5 kg with 6 kg
3) 6 kg with 2 kg - will swap
4) 6 kg is sorted

1) 3 kg with 5 kg
2) 5 kg with 2 kg - will swap
3) 5 kg is sorted

1) 3 kg with 2 kg - will swap
2) 2 kg is smaller than 3 kg 

array is sorted

// Shell Sort

- selects an element and compare element after a gap
- similar to insertion sort
- insert selected element from the gap at its proper position
- O(n log(n))

example of 6 barels - 3, 5 ,8, 9, 6, 2kg, we have to sort them via weight from lowest to highest

- gap = n / 2 = 6 / 2 = 3, the gap is 3

1) compare first element with the element after gap, so compare 3 with 9 kg and perform swapping, then compare the element on the left side from the gap
2) compare second element with the element after gap (5 with 6), there is no element lower than 6 on the right and left gap
3) compare 8 kg barel with 2 kg barel, swap them, and also compare the 2 kg with same gap, there is no other element before 3kg
4) 9 kg barel - there is no other  element

gap would be again divided by 2 

1) 3 kg will be comapred by 5 kg barel
2) 5 kg will be compared by gap on left
3) 5 kg compare with 2kg, 2 kg smaller so swap, 2 kg will be then compared with 3 kg element so it will swap again
4) the gap would be divided by 2 again = 0

once gap is 0, the sorting is completed

// Merge sort

- divide the collection of elements into smaller subsets
- recursively sort the subset
- combine or merge the result into a solution
- Divide and Conquer Appraoch

- we have 6 barrels - 3 5 8 9 6 2kg
- we divide the array into half = 3 and 3, left half is 3 5 8, right half i 9, 6, 2, if the right side is larger, then we will divide the subset again
- we will divide the left subset 

- we are dividing a larger problem into smaller subsets

// Quick Sort