// What is circluar linked list
Is a linked list wehre the tail node points back to the head node

[7, 4, 12, 8, 3]

last node is with value of 3, instead of having null reference in the last node, we will have reference to head (first node)
there is no beginning or end of the list ,but we need to keep the reference of the head and tail
the main difference between linked list and circular linked list is that we have to handle how the tail node would reference to the head node

If there is only one node, then the tail and head are pointing at the one node

// Creating circular linked list

// Traversing circular linked list
we will traverse the list through the nodes, till the last, there is no null reference, the last node in list contain reference to the first node.

- repear this part and write down the algoritm on paper

// Insert element at the beginning of the circular linked list
we will create a function
the function will contain take the element as the parameter of given data type
we will create newest object which will take NODE constructor

we will check if the list is empty, if it is empty, then this node will be the first and only node, so we will assign references accordingly
we will assing the newest.next as newest so it will reference itself
we will set the head to newest
and we will set the tail to newest

if there are more nodes in the linked list, then we will write else statement where;
tail.next (reference of the tail) = newest
newest.next = head
head = newest

outside of the if else block we need to increase the size of linked list by one

// Insert element anywhere in between the circular linked list
- we will need to create a function addAny(e, position) (add anywhere) - parameters element and position
- newest will create a new object of type NodeC with parameters e and null 
- we will need to traverse the circular list, to count the position
- the while loop counting the position while(i < position -1)
will find the position to which the node should be insterted
- O(n)

// Delete Element at beginning of circular list

// Delete Element at end of the circular list

// Delete anywhere in between circular list