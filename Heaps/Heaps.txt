// Heaps

// What are priority queues?

- Queues are data structures with 
collection of objects
are FIFO
example: customers waiting for service

Priority queues:

Collection of prioritized objects
Insertion: According to the first come basis
Removal: based on the priority of the objects
Key is associated when element is inserted in the priority queues
Element with minimum key will be next element to be removed

// Heaps Data Structure

Is a efficient priority queues utilisation

- collection of objects or elements stored as a binary tree
binary heap - also known as
relation property - key in each node of the binary tree is greater than or equal to those in its children
structural property - binary tree should be a complete binary tree
Max Heap and Min Heap

Relational property - the key of each node in binary tree is equal or greater than key
Structureal property states that the binary tree must be complete tree

Heap has got certain properties, and need to specificaly designed, 

operations of heaps

ADT

Insert - inest element in the heap
DeleteMax - delete nad return the maximum element from the heap
Max - return the maximum element from the heap

// Heaps - insertion

Element is inserted as a new node in the tree
Structural property: new node is inserted after the last node
Relational Property: perform up-heap bubbling

when inserting nodes, we need to maintian the structual and relational relationships and properties, we need to restructuralise the tree and compare the nodes

// Heaps - Insert Function

function heap_inser(e) - will take element as input

if csize == maxsize then
print("No Space")
Return

csize = csize +1
hi = csize
whiel hi > 1 and e > data [hi /2]
data[hi] = data[hi/2]
hi = [hi/2]
data[hi] = e

heap data = array, of size 8, if heap should be of size 7

up heap bubbling is performed if need to insert data and find the correct node space

// Heaps - deletion

- element is removed from the root
- structural property: root is replaced by the last node
- relational property: perform down-heap bubbling

delete node by deleting root, the last node in the tree will replace the root, so we won't lose the linking, after this down-heap bubbling would be performed 

deleteMax() - root node deletion

down heap bubling must be performed on a higher child of root node, if there is a left tree with value 15, and right child with value 20, then we will be targeting the value 20
and swap the nodes, to satisfy relational property

function deleteMax()
e = data[1]
data[1] = data[csize]
data[csize] = null
czsize = csize -1
i =1, j = i*2

while j <= csize then

if data[j] < data[j+1] then
j = j+1

if data[i] < data[j] then
temp = data[i]
data[i] = data[j]
data[j] = temp
i = j
j = i *2
else
break